[
    {
        "id": "d0add493cdb96a0e",
        "type": "tab",
        "label": "Device Communication",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4517e46c9808e772",
        "type": "http in",
        "z": "d0add493cdb96a0e",
        "name": "",
        "url": "/register-device",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "b3cf9a754e4bfa52",
                "d47f6725a7670922"
            ]
        ]
    },
    {
        "id": "b3cf9a754e4bfa52",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "Parse Payload",
        "func": "// Check if msg.payload is a string before parsing\nif (typeof msg.payload === 'string') {\n    msg.payload = JSON.parse(msg.payload);\n}\n\n// Extract device ID, software version, and hardware type from the payload\nlet deviceID = msg.payload.device_id;\nlet softwareVersion = msg.payload.software_version; // New line to extract software version\nlet hardwareType = msg.payload.hardware_type; // New line to extract hardware type\n\n// Set airport code to the incoming value or default to 'KATL' if not provided\nlet airportCode = msg.payload.airport_code || \"KATL\";\n\n// Set check-in period to the incoming value or default to 300000 if not provided\nlet checkInPeriod = msg.payload.check_in_period || 300000;\n\n// Log the incoming data\nnode.log(`Device ID: ${deviceID}, Software Version: ${softwareVersion}, Hardware Type: ${hardwareType}, Airport Code: ${airportCode}, Check-in Period: ${checkInPeriod}`);\n\n// Prepare the payload for database insertion\nmsg.deviceData = {\n    device_id: deviceID,\n    software_version: softwareVersion, // Include software version\n    hardware_type: hardwareType, // Include hardware type\n    airport_code: airportCode,\n    check_in_period: checkInPeriod // Add check-in period here\n};\n\n// Prepare the response payload\nmsg.payload = {\n    status: \"success\",\n    device_id: deviceID,\n    airport_code: airportCode,\n    check_in_period: checkInPeriod, // Include check-in period in the response\n    message: \"Registered successfully\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "de34708b0ae6693c",
                "5e16045dfef04316"
            ]
        ]
    },
    {
        "id": "078b6f55e733291d",
        "type": "postgresql",
        "z": "d0add493cdb96a0e",
        "name": "",
        "query": "INSERT INTO devices (mac_id, software_version, hardware_type, airport_code, check_in_period) VALUES ($1, $2, $3, $4, $5);",
        "postgreSQLConfig": "316192b3b21d54c6",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 930,
        "y": 200,
        "wires": [
            [
                "3a1955850fcaef63"
            ]
        ]
    },
    {
        "id": "fd81824b7fece4e3",
        "type": "http response",
        "z": "d0add493cdb96a0e",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1360,
        "y": 200,
        "wires": []
    },
    {
        "id": "405c954390d29e06",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "insert into database",
        "func": "msg.params = [\n    msg.deviceData.device_id,      // MAC ID\n    msg.deviceData.software_version, // Software version\n    msg.deviceData.hardware_type,   // Hardware type\n    msg.deviceData.airport_code,     // Airport code\n    msg.deviceData.check_in_period    // Check-in period\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "078b6f55e733291d"
            ]
        ]
    },
    {
        "id": "2a0509372af546bd",
        "type": "postgresql",
        "z": "d0add493cdb96a0e",
        "name": "",
        "query": "SELECT COUNT(*) FROM devices WHERE mac_id = $1;",
        "postgreSQLConfig": "316192b3b21d54c6",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 850,
        "y": 60,
        "wires": [
            [
                "051a9ab709fe6c52"
            ]
        ]
    },
    {
        "id": "de34708b0ae6693c",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "device check in",
        "func": "msg.params = [msg.deviceData.device_id];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "2a0509372af546bd",
                "d3207e9c0f1c2b95"
            ]
        ]
    },
    {
        "id": "051a9ab709fe6c52",
        "type": "switch",
        "z": "d0add493cdb96a0e",
        "name": "Check Device Registration",
        "property": "payload[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "405c954390d29e06"
            ],
            [
                "35870a904fc36f5d"
            ]
        ]
    },
    {
        "id": "3a1955850fcaef63",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "successfully registered",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Device successfully registered\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "fd81824b7fece4e3"
            ]
        ]
    },
    {
        "id": "c326cca27fd4b334",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "message to device",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Device registration exists\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 280,
        "wires": [
            [
                "4e10f21114bf5da2"
            ]
        ]
    },
    {
        "id": "4e10f21114bf5da2",
        "type": "http response",
        "z": "d0add493cdb96a0e",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1360,
        "y": 280,
        "wires": []
    },
    {
        "id": "cd415b182960d027",
        "type": "postgresql",
        "z": "d0add493cdb96a0e",
        "name": "",
        "query": "UPDATE devices \nSET \n    software_version = $1, \n    check_in_period = $2, \n    last_updated = NOW() \nWHERE \n    mac_id = $3;",
        "postgreSQLConfig": "316192b3b21d54c6",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 930,
        "y": 280,
        "wires": [
            [
                "c326cca27fd4b334"
            ]
        ]
    },
    {
        "id": "35870a904fc36f5d",
        "type": "function",
        "z": "d0add493cdb96a0e",
        "name": "update database",
        "func": "// Extract device information from the payload\nlet deviceID = msg.deviceData.device_id;\nlet softwareVersion = msg.deviceData.software_version;\nlet checkInPeriod = msg.deviceData.check_in_period;\n\n// Prepare the payload for SQL query\nmsg.params = [softwareVersion, checkInPeriod, deviceID]; // Set the parameters for the query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "cd415b182960d027"
            ]
        ]
    },
    {
        "id": "d47f6725a7670922",
        "type": "debug",
        "z": "d0add493cdb96a0e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 120,
        "wires": []
    },
    {
        "id": "5e16045dfef04316",
        "type": "debug",
        "z": "d0add493cdb96a0e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 120,
        "wires": []
    },
    {
        "id": "d3207e9c0f1c2b95",
        "type": "debug",
        "z": "d0add493cdb96a0e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "316192b3b21d54c6",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "postgres",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "pilotpanel",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "pilotpanel",
        "userFieldType": "str",
        "password": "superstrongpassword",
        "passwordFieldType": "str"
    }
]